// Code generated by mockery v2.22.1. DO NOT EDIT.

package mocks

import (
	context "context"

	database "github.com/kodekoding/phastos/go/database"

	mock "github.com/stretchr/testify/mock"

	sql "database/sql"

	user "godem/domain/models/user"
)

// Logins is an autogenerated mock type for the Logins type
type Logins struct {
	mock.Mock
}

// Authenticate provides a mock function with given fields: ctx, requestData
func (_m *Logins) Authenticate(ctx context.Context, requestData *user.LoginRequest) (*user.Users, error) {
	ret := _m.Called(ctx, requestData)

	var r0 *user.Users
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *user.LoginRequest) (*user.Users, error)); ok {
		return rf(ctx, requestData)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *user.LoginRequest) *user.Users); ok {
		r0 = rf(ctx, requestData)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user.Users)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *user.LoginRequest) error); ok {
		r1 = rf(ctx, requestData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BulkInsert provides a mock function with given fields: ctx, data, trx
func (_m *Logins) BulkInsert(ctx context.Context, data interface{}, trx ...*sql.Tx) (*database.CUDResponse, error) {
	_va := make([]interface{}, len(trx))
	for _i := range trx {
		_va[_i] = trx[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, data)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *database.CUDResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, ...*sql.Tx) (*database.CUDResponse, error)); ok {
		return rf(ctx, data, trx...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, ...*sql.Tx) *database.CUDResponse); ok {
		r0 = rf(ctx, data, trx...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.CUDResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, interface{}, ...*sql.Tx) error); ok {
		r1 = rf(ctx, data, trx...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Count provides a mock function with given fields: ctx, tableName, reqData
func (_m *Logins) Count(ctx context.Context, tableName string, reqData *database.TableRequest) (int, int, error) {
	ret := _m.Called(ctx, tableName, reqData)

	var r0 int
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *database.TableRequest) (int, int, error)); ok {
		return rf(ctx, tableName, reqData)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *database.TableRequest) int); ok {
		r0 = rf(ctx, tableName, reqData)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *database.TableRequest) int); ok {
		r1 = rf(ctx, tableName, reqData)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, *database.TableRequest) error); ok {
		r2 = rf(ctx, tableName, reqData)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Delete provides a mock function with given fields: ctx, condition, trx
func (_m *Logins) Delete(ctx context.Context, condition map[string]interface{}, trx ...*sql.Tx) (*database.CUDResponse, error) {
	_va := make([]interface{}, len(trx))
	for _i := range trx {
		_va[_i] = trx[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, condition)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *database.CUDResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, map[string]interface{}, ...*sql.Tx) (*database.CUDResponse, error)); ok {
		return rf(ctx, condition, trx...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, map[string]interface{}, ...*sql.Tx) *database.CUDResponse); ok {
		r0 = rf(ctx, condition, trx...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.CUDResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, map[string]interface{}, ...*sql.Tx) error); ok {
		r1 = rf(ctx, condition, trx...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteById provides a mock function with given fields: ctx, id, trx
func (_m *Logins) DeleteById(ctx context.Context, id int, trx ...*sql.Tx) (*database.CUDResponse, error) {
	_va := make([]interface{}, len(trx))
	for _i := range trx {
		_va[_i] = trx[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, id)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *database.CUDResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, ...*sql.Tx) (*database.CUDResponse, error)); ok {
		return rf(ctx, id, trx...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, ...*sql.Tx) *database.CUDResponse); ok {
		r0 = rf(ctx, id, trx...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.CUDResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, ...*sql.Tx) error); ok {
		r1 = rf(ctx, id, trx...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDetail provides a mock function with given fields: ctx, opts
func (_m *Logins) GetDetail(ctx context.Context, opts *database.QueryOpts) error {
	ret := _m.Called(ctx, opts)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *database.QueryOpts) error); ok {
		r0 = rf(ctx, opts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetDetailById provides a mock function with given fields: ctx, resultStruct, id, optionalTableName
func (_m *Logins) GetDetailById(ctx context.Context, resultStruct interface{}, id int, optionalTableName ...string) error {
	_va := make([]interface{}, len(optionalTableName))
	for _i := range optionalTableName {
		_va[_i] = optionalTableName[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, resultStruct, id)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, int, ...string) error); ok {
		r0 = rf(ctx, resultStruct, id, optionalTableName...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetList provides a mock function with given fields: ctx, opts
func (_m *Logins) GetList(ctx context.Context, opts *database.QueryOpts) error {
	ret := _m.Called(ctx, opts)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *database.QueryOpts) error); ok {
		r0 = rf(ctx, opts)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Insert provides a mock function with given fields: ctx, data, trx
func (_m *Logins) Insert(ctx context.Context, data interface{}, trx ...*sql.Tx) (*database.CUDResponse, error) {
	_va := make([]interface{}, len(trx))
	for _i := range trx {
		_va[_i] = trx[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, data)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *database.CUDResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, ...*sql.Tx) (*database.CUDResponse, error)); ok {
		return rf(ctx, data, trx...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, ...*sql.Tx) *database.CUDResponse); ok {
		r0 = rf(ctx, data, trx...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.CUDResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, interface{}, ...*sql.Tx) error); ok {
		r1 = rf(ctx, data, trx...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, data, condition, trx
func (_m *Logins) Update(ctx context.Context, data interface{}, condition map[string]interface{}, trx ...*sql.Tx) (*database.CUDResponse, error) {
	_va := make([]interface{}, len(trx))
	for _i := range trx {
		_va[_i] = trx[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, data, condition)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *database.CUDResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, map[string]interface{}, ...*sql.Tx) (*database.CUDResponse, error)); ok {
		return rf(ctx, data, condition, trx...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, map[string]interface{}, ...*sql.Tx) *database.CUDResponse); ok {
		r0 = rf(ctx, data, condition, trx...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.CUDResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, interface{}, map[string]interface{}, ...*sql.Tx) error); ok {
		r1 = rf(ctx, data, condition, trx...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateById provides a mock function with given fields: ctx, data, id, trx
func (_m *Logins) UpdateById(ctx context.Context, data interface{}, id int, trx ...*sql.Tx) (*database.CUDResponse, error) {
	_va := make([]interface{}, len(trx))
	for _i := range trx {
		_va[_i] = trx[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, data, id)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *database.CUDResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, int, ...*sql.Tx) (*database.CUDResponse, error)); ok {
		return rf(ctx, data, id, trx...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, int, ...*sql.Tx) *database.CUDResponse); ok {
		r0 = rf(ctx, data, id, trx...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.CUDResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, interface{}, int, ...*sql.Tx) error); ok {
		r1 = rf(ctx, data, id, trx...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewLogins interface {
	mock.TestingT
	Cleanup(func())
}

// NewLogins creates a new instance of Logins. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewLogins(t mockConstructorTestingTNewLogins) *Logins {
	mock := &Logins{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
