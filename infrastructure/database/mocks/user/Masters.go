// Code generated by mockery v2.22.1. DO NOT EDIT.

package mocks

import (
	context "context"
	models "godem/domain/models"

	mock "github.com/stretchr/testify/mock"
)

// Masters is an autogenerated mock type for the Masters type
type Masters struct {
	mock.Mock
}

// CreateNew provides a mock function with given fields: ctx, requestData
func (_m *Masters) CreateNew(ctx context.Context, requestData interface{}) (*models.CUDResponse, error) {
	ret := _m.Called(ctx, requestData)

	var r0 *models.CUDResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) (*models.CUDResponse, error)); ok {
		return rf(ctx, requestData)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) *models.CUDResponse); ok {
		r0 = rf(ctx, requestData)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.CUDResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, interface{}) error); ok {
		r1 = rf(ctx, requestData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteData provides a mock function with given fields: ctx, id
func (_m *Masters) DeleteData(ctx context.Context, id int64) (*models.CUDResponse, error) {
	ret := _m.Called(ctx, id)

	var r0 *models.CUDResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (*models.CUDResponse, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) *models.CUDResponse); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.CUDResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDetailByID provides a mock function with given fields: ctx, id
func (_m *Masters) GetDetailByID(ctx context.Context, id int64) (interface{}, error) {
	ret := _m.Called(ctx, id)

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (interface{}, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) interface{}); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetList provides a mock function with given fields: ctx, requestData
func (_m *Masters) GetList(ctx context.Context, requestData interface{}) (interface{}, error) {
	ret := _m.Called(ctx, requestData)

	var r0 interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) (interface{}, error)); ok {
		return rf(ctx, requestData)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) interface{}); ok {
		r0 = rf(ctx, requestData)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, interface{}) error); ok {
		r1 = rf(ctx, requestData)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateData provides a mock function with given fields: ctx, requestData, id
func (_m *Masters) UpdateData(ctx context.Context, requestData interface{}, id int64) (*models.CUDResponse, error) {
	ret := _m.Called(ctx, requestData, id)

	var r0 *models.CUDResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, int64) (*models.CUDResponse, error)); ok {
		return rf(ctx, requestData, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, int64) *models.CUDResponse); ok {
		r0 = rf(ctx, requestData, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.CUDResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, interface{}, int64) error); ok {
		r1 = rf(ctx, requestData, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewMasters interface {
	mock.TestingT
	Cleanup(func())
}

// NewMasters creates a new instance of Masters. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMasters(t mockConstructorTestingTNewMasters) *Masters {
	mock := &Masters{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
